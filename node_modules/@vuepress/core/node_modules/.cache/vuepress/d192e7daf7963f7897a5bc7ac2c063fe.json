{"remainingRequest":"/Users/aigouzz/fe-project/fe-pre/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aigouzz/fe-project/fe-pre/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aigouzz/fe-project/fe-pre/docs/css/3.md?vue&type=style&index=0&id=1b5426dc&lang=css&","dependencies":[{"path":"/Users/aigouzz/fe-project/fe-pre/docs/css/3.md","mtime":1665924011444},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655715156000},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/vue-loader/lib/index.js","mtime":1655715099000},{"path":"/Users/aigouzz/fe-project/fe-pre/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cmh0bWwge2ZvbnQtc2l6ZTogMTBweDsgIH0gLyogIOWFrOW8jzE2cHgqNjIuNSU9MTBweCAgKi8gIAouYmlne2ZvbnQtc2l6ZTogMS40cmVtfQouc21hbGx7Zm9udC1zaXplOiAxLjJyZW19Cg=="},{"version":3,"sources":["3.md"],"names":[],"mappings":";AAiEA;AACA;AACA","file":"3.md","sourceRoot":"docs/css","sourcesContent":["<template>\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><p><font style=\"font-size: 36px;\">em/px/rem/vh/vw区别和联系</font></p>\n<p>一、介绍\n传统的项目开发中，我们只会用到px、%、em这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性</p>\n<p>从CSS3开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了rem、vh、vw、vm等一些新的计量单位</p>\n<p>利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等</p>\n<p>#二、单位\n在css单位中，可以分为长度单位、绝对单位，如下表所指示</p>\n<p>CSS单位\t\n相对长度单位\tem、ex、ch、rem、vw、vh、vmin、vmax、%\n绝对长度单位\tcm、mm、in、px、pt、pc\n这里我们主要讲述px、em、rem、vh、vw</p>\n<p>#px\npx，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p>\n<p>有些人会把px认为是相对长度，原因在于在移动端中存在设备像素比，px实际显示的大小是不确定的</p>\n<p>这里之所以认为px为绝对单位，在于px的大小和元素的其他属性无关</p>\n<p>#em\nem是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（1em = 16px）</p>\n<p>为了简化 font-size 的换算，我们需要在css中的 body 选择器中声明font-size= 62.5%，这就使 em 值变为 16px*62.5% = 10px</p>\n<p>这样 12px = 1.2em, 10px = 1em, 也就是说只需要将你的原来的px 数值除以 10，然后换上 em作为单位就行了</p>\n<p>特点：</p>\n<p>em 的值并不是固定的\nem 会继承父级元素的字体大小\nem 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\n任意浏览器的默认字体高都是 16px\n举个例子</p>\n<div class=\"big\">\n    我是14px=1.4rem<div class=\"small\">我是12px=1.2rem</div>\n</div>\n样式为\n<p>这时候.big元素的font-size为14px，而.small元素的font-size为12px</p>\n<p>#rem\nrem，相对单位，相对的只是HTML根元素font-size的值</p>\n<p>同理，如果想要简化font-size的转化，我们可以在根元素html中加入font-size: 62.5%</p>\n<p>html {font-size: 62.5%;  } /*  公式16px*62.5%=10px  */\n这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助</p>\n<p>特点：</p>\n<p>rem单位可谓集相对大小和绝对大小的优点于一身\n和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸\n#vh、vw\nvw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，vh则为窗口的高度</p>\n<p>这里的窗口分成几种情况：</p>\n<p>在桌面端，指的是浏览器的可视区域</p>\n<p>移动端指的就是布局视口</p>\n<p>像vw、vh，比较容易混淆的一个单位是%，不过百分比宽泛的讲是相对于父元素：</p>\n<p>对于普通定位元素就是我们理解的父元素\n对于position: absolute;的元素是相对于已定位的父元素\n对于position: fixed;的元素是相对于 ViewPort（可视窗口）</p>\n<h2 id=\"三、总结\"><a class=\"header-anchor\" href=\"#三、总结\">#</a> 三、总结</h2>\n<ul>\n<li>px：绝对单位，页面按精确像素展示</li>\n<li>em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算，整个页面内1em不是一个固定的值</li>\n<li>rem：相对单位，可理解为root em, 相对根节点html的字体大小来计算</li>\n<li>vh、vw：主要用于页面视口大小布局，在页面布局上更加方便简单</li>\n</ul>\n</ContentSlotsDistributor>\n</template>\n<style>\n    html {font-size: 10px;  } /*  公式16px*62.5%=10px  */  \n    .big{font-size: 1.4rem}\n    .small{font-size: 1.2rem}\n</style>\n\n\n"]}]}