{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{562:function(s,n,e){\"use strict\";e.r(n);var t=e(10),a=Object(t.a)({},(function(){var s=this,n=s._self._c;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"p\",[n(\"font\",{staticStyle:{\"font-size\":\"36px\"}},[s._v(\"Vue项目目录结构怎么划分\")])],1),s._v(\" \"),n(\"h2\",{attrs:{id:\"一、为什么要划分\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、为什么要划分\"}},[s._v(\"#\")]),s._v(\" 一、为什么要划分\")]),s._v(\" \"),n(\"p\",[s._v(\"使用vue构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高\")]),s._v(\" \"),n(\"p\",[s._v(\"在划分项目结构的时候，需要遵循一些基本的原则：\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"文件夹和文件夹内部文件的语义一致性\")]),s._v(\" \"),n(\"li\",[s._v(\"单一入口/出口\")]),s._v(\" \"),n(\"li\",[s._v(\"就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\")]),s._v(\" \"),n(\"li\",[s._v(\"公共的文件应该以绝对路径的方式从根目录引用\")]),s._v(\" \"),n(\"li\",[s._v(\"/src 外的文件不应该被引入\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"文件夹和文件夹内部文件的语义一致性\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件夹和文件夹内部文件的语义一致性\"}},[s._v(\"#\")]),s._v(\" 文件夹和文件夹内部文件的语义一致性\")]),s._v(\" \"),n(\"p\",[s._v(\"我们的目录结构都会有一个文件夹是按照路由模块来划分的，如pages文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹\")]),s._v(\" \"),n(\"p\",[s._v(\"这样做的好处在于一眼就从 pages文件夹看出这个项目的路由有哪些\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"单一入口-出口\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单一入口-出口\"}},[s._v(\"#\")]),s._v(\" 单一入口/出口\")]),s._v(\" \"),n(\"p\",[s._v(\"举个例子，在pages文件夹里面存在一个seller文件夹，这时候seller 文件夹应该作为一个独立的模块由外部引入，并且 seller/index.js 应该作为外部引入 seller 模块的唯一入口\")]),s._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 错误用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" sellerReducer \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'src/pages/seller/reducer'\")]),s._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 正确用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" reducer \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"as\")]),s._v(\" sellerReducer \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'src/pages/seller'\")]),s._v(\"\\n\")])])]),n(\"p\",[s._v(\"这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点\")]),s._v(\" \"),n(\"p\",[s._v(\"#就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\\n使用相对路径可以保证模块内部的独立性\")]),s._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 正确用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" styles \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'./index.module.scss'\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 错误用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" styles \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'src/pages/seller/index.module.scss'\")]),s._v(\"\\n\")])])]),n(\"p\",[s._v(\"举个例子\")]),s._v(\" \"),n(\"p\",[s._v(\"假设我们现在的 seller 目录是在 src/pages/seller，如果我们后续发生了路由变更，需要加一个层级，变成 src/pages/user/seller。\")]),s._v(\" \"),n(\"p\",[s._v(\"如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，seller 文件夹内部不需要做任何变更。\")]),s._v(\" \"),n(\"p\",[s._v(\"但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 import 的路径做修改\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"公共的文件应该以绝对路径的方式从根目录引用\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#公共的文件应该以绝对路径的方式从根目录引用\"}},[s._v(\"#\")]),s._v(\" 公共的文件应该以绝对路径的方式从根目录引用\")]),s._v(\" \"),n(\"p\",[s._v(\"公共指的是多个路由模块共用，如一些公共的组件，我们可以放在src/components下\")]),s._v(\" \"),n(\"p\",[s._v(\"在使用到的页面中，采用绝对路径的形式引用\")]),s._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 错误用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" Input \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'../../components/input'\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 正确用法\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"import\")]),s._v(\" Input \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'src/components/input'\")]),s._v(\"\\n\")])])]),n(\"p\",[s._v(\"同样的，如果我们需要对文件夹结构进行调整。将 /src/components/input 变成 /src/components/new/input，如果使用绝对路径，只需要全局搜索替换\")]),s._v(\" \"),n(\"p\",[s._v(\"再加上绝对路径有全局的语义，相对路径有独立模块的语义\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"src-外的文件不应该被引入\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#src-外的文件不应该被引入\"}},[s._v(\"#\")]),s._v(\" /src 外的文件不应该被引入\")]),s._v(\" \"),n(\"p\",[s._v(\"vue-cli脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个src文件夹，里面放着所有的项目需要的资源，js,css, png, svg 等等。src 外会放一些项目配置，依赖，环境等文件\")]),s._v(\" \"),n(\"p\",[s._v(\"这样的好处是方便划分项目代码文件和配置文件\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"二、目录结构\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、目录结构\"}},[s._v(\"#\")]),s._v(\" 二、目录结构\")]),s._v(\" \"),n(\"p\",[s._v(\"单页面目录结构\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"project\\n│  .browserslistrc\\n│  .env.production\\n│  .eslintrc.js\\n│  .gitignore\\n│  babel.config.js\\n│  package-lock.json\\n│  package.json\\n│  README.md\\n│  vue.config.js\\n│  yarn-error.log\\n│  yarn.lock\\n│\\n├─public\\n│      favicon.ico\\n│      index.html\\n│\\n|-- src\\n    |-- components\\n        |-- input\\n            |-- index.js\\n            |-- index.module.scss\\n    |-- pages\\n        |-- seller\\n            |-- components\\n                |-- input\\n                    |-- index.js\\n                    |-- index.module.scss\\n            |-- reducer.js\\n            |-- saga.js\\n            |-- index.js\\n            |-- index.module.scss\\n        |-- buyer\\n            |-- index.js\\n        |-- index.js\\n\")])])]),n(\"p\",[s._v(\"多页面目录结构\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"my-vue-test:.\\n│  .browserslistrc\\n│  .env.production\\n│  .eslintrc.js\\n│  .gitignore\\n│  babel.config.js\\n│  package-lock.json\\n│  package.json\\n│  README.md\\n│  vue.config.js\\n│  yarn-error.log\\n│  yarn.lock\\n│\\n├─public\\n│      favicon.ico\\n│      index.html\\n│\\n└─src\\n    ├─apis //接口文件根据页面或实例模块化\\n    │      index.js\\n    │      login.js\\n    │\\n    ├─components //全局公共组件\\n    │  └─header\\n    │          index.less\\n    │          index.vue\\n    │\\n    ├─config //配置（环境变量配置不同passid等）\\n    │      env.js\\n    │      index.js\\n    │\\n    ├─contant //常量\\n    │      index.js\\n    │\\n    ├─images //图片\\n    │      logo.png\\n    │\\n    ├─pages //多页面vue项目，不同的实例\\n    │  ├─index //主实例\\n    │  │  │  index.js\\n    │  │  │  index.vue\\n    │  │  │  main.js\\n    │  │  │  router.js\\n    │  │  │  store.js\\n    │  │  │\\n    │  │  ├─components //业务组件\\n    │  │  └─pages //此实例中的各个路由\\n    │  │      ├─amenu\\n    │  │      │      index.vue\\n    │  │      │\\n    │  │      └─bmenu\\n    │  │              index.vue\\n    │  │\\n    │  └─login //另一个实例\\n    │          index.js\\n    │          index.vue\\n    │          main.js\\n    │\\n    ├─scripts //包含各种常用配置，工具函数\\n    │  │  map.js\\n    │  │\\n    │  └─utils\\n    │          helper.js\\n    │\\n    ├─store //vuex仓库\\n    │  │  index.js\\n    │  │\\n    │  ├─index\\n    │  │      actions.js\\n    │  │      getters.js\\n    │  │      index.js\\n    │  │      mutation-types.js\\n    │  │      mutations.js\\n    │  │      state.js\\n    │  │\\n    │  └─user\\n    │          actions.js\\n    │          getters.js\\n    │          index.js\\n    │          mutation-types.js\\n    │          mutations.js\\n    │          state.js\\n    │\\n    └─styles //样式统一配置\\n        │  components.less\\n        │\\n        ├─animation\\n        │      index.less\\n        │      slide.less\\n        │\\n        ├─base\\n        │      index.less\\n        │      style.less\\n        │      var.less\\n        │      widget.less\\n        │\\n        └─common\\n                index.less\\n                reset.less\\n                style.less\\n                transition.less\\n\")])])]),n(\"h3\",{attrs:{id:\"小结\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[s._v(\"#\")]),s._v(\" 小结\")]),s._v(\" \"),n(\"p\",[s._v(\"项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"参考文献\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文献\"}},[s._v(\"#\")]),s._v(\" 参考文献\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[s._v(\"https://juejin.cn/post/6844904129186234381#heading-0\")])]),s._v(\" \"),n(\"li\",[n(\"p\",[s._v(\"https://zhuanlan.zhihu.com/p/89693668\")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);","extractedComments":[]}